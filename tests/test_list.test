#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <ctype.h>
#include <stdio.h>
#include <stdarg.h>
#include <check.h>

#include "mud.h"

#suite list_c
#tcase basic_list_operations

#test one_element_test
    LIST *list = AllocList();
    ck_assert_int_eq(0, SizeOfList(list));
    AttachToList("one", list);
    ck_assert_int_eq(1, SizeOfList(list));
    DetachFromList("one", list);
    ck_assert_int_eq(0, SizeOfList(list));
    FreeList(list);

#test n_element_test_insertion
    time_t t;
    srand((unsigned) time(&t));
    const int num_elems = rand() % 100;
    LIST *list = AllocList();
    ck_assert_int_eq(0, SizeOfList(list));
    for(int i = 0; i < num_elems; i++) {
        ck_assert_int_eq(i, SizeOfList(list));
        char *str = alloca(5);
        snprintf(str, 4, "%d", i);
        AttachToList(str, list);
    }
    ck_assert_int_eq(num_elems, SizeOfList(list));
    FreeList(list);

#test n_element_test_insertion_and_removal

    /* Generate how many cycles we want to test insertion/removal (up to 100) */

    time_t t;
    srand((unsigned) time(&t));
    const int num_elems = rand() % 100;

    /* Create list and check is empty */

    LIST *list = AllocList();
    ck_assert_int_eq(0, SizeOfList(list));

    /* insert num_elems in the list as malloc'ed integers */
    /* we do this malloc thing so they've different mem addresses */
    /* if we add the &i directly, they stay in the same mem address */
    /* and the list lib things they're the same number */
    /* it checks addresses, not content */

    for(int i = 0; i < num_elems; i++) {
        ck_assert_int_eq(i, SizeOfList(list));
        char *str = malloc(5);
        snprintf(str, 4, "%d", i);
        AttachToList(str, list);
    }
    
    /* assert we loaded all the numbers */

    ck_assert_int_eq(num_elems, SizeOfList(list));

    /* Create an iterator and count down */
    /* removing the content and freeing the malloc'ed value */

    ITERATOR Iter;
    AttachIterator(&Iter, list);
    char *content = NULL; 
    int j = num_elems;
    while ((content = (char *) NextInList(&Iter)) != NULL) {

        /* Remove from list */
        DetachFromList(content, list);
        /* free malloc'ed integer */
        free(content);
        /* decrement the number of remaining elements in the list */
        j--;
    }
    DetachIterator(&Iter);

    /* assert we free'd everything and size of list == 0 */

    ck_assert_int_eq(j, 0);
    ck_assert_int_eq(0, SizeOfList(list));

    /* free the list, we don't want mem leaks here, punk! */

    FreeList(list);
